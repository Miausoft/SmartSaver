@using SmartSaver.EntityFrameworkCore.Models
@using SmartSaver.MVC.Models
@model DashboardViewModel
@{
    var score = Math.Min(Math.Round(Model.SavedCurrentMonth * 10 / Model.ToSaveCurrentMonth, 1), 10);
    
    var categories = Model.SpendingTransactions.GroupBy(t => t.Category.Title)
        .Select(g => new CategorySpending()
        {
            Amount = g.Select(p => p.Amount).Sum(),
            Title = g.First().Category.Title
        }).ToList();
}

@section Jumbotron {
    <head>
        <link rel="stylesheet" type="text/css" href="~/css/generalDesign.css" />
    </head>
<div class="jumbotron jumbotron-fluid mb-5 background-auth">
        <div class="container">
            <h5 class="text-light" style="text-transform: uppercase; letter-spacing: 5px"><b>this month score</b></h5>
            <div style="cursor: pointer; font-size: 1.2em" data-toggle="modal" data-target="#scoreModal">
                @if (score >= 9)
                {
                    <span class="badge badge-pill badge-primary">@score out of 10 &#128526;</span>
                } 
                else if (score < 9 && score >= 6)
                {
                    <span class="badge badge-pill badge-warning">@score out of 10</span>
                }
                else
                {
                    <span class="badge badge-pill badge-danger">@score out of 10 &#128561;</span>
                }
            </div>
        </div>
    </div>
<div class="modal fade" id="scoreModal" tabindex="-1" role="dialog" aria-labelledby="scoreModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">This month score</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    At the end of the month you should have at least <b>@Model.ToSaveCurrentMonth.ToString("C")</b> money left in your budget.<br />
                    For this moment you have <b>@Model.SavedCurrentMonth.ToString("C")</b> in your budget. 
                    <hr />
                    This month you have saved @((score*10)) % of the required amount! 
                    @if (score <= 10)
                    {
                        <p>You can do better!</p>
                    }
                    
                    <button class="btn btn-success" type="button" class="close" data-dismiss="modal" aria-label="Close">
                       I will move towards my dream!
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (Model.Transactions.Count == 0)
{
    <link rel="stylesheet" href="css/ring.css" />
    <div class="circles" id="circles">
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
        <h3 class="nothing-label">Nothing</h3>
        
    </div>
}
else
{
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    Spending history (@DateTime.Now.Month/@DateTime.Now.Year)
                </div>
                <div class="card-body">
                    <canvas id="mychart" height="80"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    Spent by category (@DateTime.Now.Month/@DateTime.Now.Year)
                </div>
                <div class="card-body">
                    <canvas id="categoryChart" style="width:200px;height:180px"></canvas>
                </div>
            </div>
        </div>
        
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    Suggestions for the month.
                </div>
                <div class="card-body">
                    Nera
                </div>
            </div>
        </div>
    </div>
}

<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
<script>
    let chart = document.getElementById("mychart")
    let categoryChart = document.getElementById("categoryChart")
    console.log(chart);
    
    let myChart = new Chart(chart, {
        type: 'line',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.FirstChartData.Select(t => t.ActionTime.ToShortDateString()))),
            datasets: [{
                label: 'Balance',
                backgroundColor: '#C3E6CB',
                borderColor: '#2CA746',
                data: @Html.Raw(Json.Serialize(Model.FirstChartData.Select(t => t.Amount)))
            }],
        },
    });
    
    let doughnutChart = new Chart(categoryChart, {
        type: 'doughnut',
        data: {
            datasets: [{
                backgroundColor: ['rgb(82,244,13)', 'rgb(255,59,81)', 'rgb(155,155,222)', 'rgb(91,38,67)'],
                data: @Html.Raw(Json.Serialize(categories.Select(t => t.Amount)))
            }],
        
            labels: @Html.Raw(Json.Serialize(categories.Select(t => t.Title)))
        }
    })
</script>

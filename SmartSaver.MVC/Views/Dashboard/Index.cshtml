@using SmartSaver.EntityFrameworkCore.Models
@using SmartSaver.MVC.Models
@model DashboardViewModel
@{
    var score = Math.Min(Math.Round(Model.SavedCurrentMonth * 10 / Model.ToSaveCurrentMonth, 1), 10);
    
    var categories = Model.SpendingTransactions.GroupBy(t => t.Category.Title)
        .Select(g => new CategorySpending()
        {
            Amount = g.Select(p => p.Amount).Sum(),
            Title = g.First().Category.Title
        }).ToList();
}

@section Jumbotron {
    <div class="jumbotron jumbotron-fluid mb-5">
      <div class="container">
          <h5 class="text-light" style="text-transform: uppercase; letter-spacing: 5px"><b>Monthly score</b></h5>
          <div style="cursor: pointer; font-size: 1.2em">
              @if (score >= 9)
              {
                  <span class="badge badge-pill badge-primary">@score out of 10 &#128526;</span>
              } 
              else if (score < 9 && score >= 6)
              {
                  <span class="badge badge-pill badge-warning">@score out of 10</span>
              }
              else
              {
                  <span class="badge badge-pill badge-danger">@score out of 10 &#128561;</span>
              }
          </div>
      </div>
    </div>
}

<div class="row mb-4">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                Spendings chart
            </div>
            <div class="card-body">
                <canvas id="mychart" height="80"></canvas>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                Spending categories (This month)
            </div>
            <div class="card-body">
                <canvas id="categoryChart" style="width:200px;height:180px"></canvas>
            </div>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
<script>
    let chart = document.getElementById("mychart")
    let categoryChart = document.getElementById("categoryChart")
    console.log(chart);
    
    let myChart = new Chart(chart, {
        type: 'line',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.FirstChartData.Select(t => t.ActionTime.ToShortDateString()))),
            datasets: [{
                label: 'Balance',
                backgroundColor: '#C3E6CB',
                borderColor: '#2CA746',
                data: @Html.Raw(Json.Serialize(Model.FirstChartData.Select(t => t.Amount)))
            }],
        },
    });
    
    let doughnutChart = new Chart(categoryChart, {
        type: 'doughnut',
        data: {
            datasets: [{
                backgroundColor: ['rgb(82,244,13)', 'rgb(255,59,81)', 'rgb(155,155,222)', 'rgb(91,38,67)'],
                data: @Html.Raw(Json.Serialize(categories.Select(t => t.Amount)))
            }],
        
            labels: @Html.Raw(Json.Serialize(categories.Select(t => t.Title)))
        }
    })
</script>
